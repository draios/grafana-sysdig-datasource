pipeline {
    agent {
        dockerfile {
            dir 'build'
            label 'builder-backend-j8'
        }
    }

    environment {
        VERSION = readFile "VERSION"
        SLACK_URL = credentials('grafana-ds-build-slack-webhook')
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Prepare build') {
            steps {
                // At this point, Jenkins checked out the repository already.
                // Also, the workspace is persistent.
                // Since the previous build might have left some artifacts then now we're going to
                // remove everything and checkout the repository again
                sh "rm -rf *"

                // NOTE: 'checkout scm' is equivalent to
                // git url: "https://github.com/draios/grafana-sysdig-datasource", branch: "${env.BRANCH_NAME}", credentialsId: "github-jenkins-user-token"
                checkout scm

                // Prepare npm/yarn environment
                sh "npm install"
                sh "./node_modules/.bin/yarn install"
            }
        }

        stage('Build') {
            steps {
                sh "npm run build"
            }
        }

        stage('Configure feature branch deploy') {
            when {
                not {
                    branch 'dev'
                }
                not {
                    branch 'master'
                }
            }
            steps {
                script {
                    S3_DEST = "dev/grafana-sysdig-datasource/${env.BRANCH_NAME}"
                }
            }
        }
        stage('Configure dev deploy') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    S3_DEST = "dev/grafana-sysdig-datasource"
                }
            }
        }
        stage('Configure master deploy') {
            when {
                branch 'master'
            }
            steps {
                script {
                    S3_DEST = "stable/grafana-sysdig-datasource"
                }
            }
        }

        stage('Deploy') {
            steps {
                sh "./build/upload-s3.sh ${VERSION} ${env.BUILD_ID}"
            }
        }

        stage('Tag') {
            when {
                branch 'master'
            }
            steps {
                echo "Tagging repository v${VERSION}"

                withCredentials([usernamePassword(credentialsId: "github-jenkins-user-token", passwordVariable: "GIT_PASSWORD", usernameVariable: "GIT_USERNAME")]) {
                    sh("git tag -a v${VERSION}")
                    sh("git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/draios/grafana-sysdig-datasource --tags")
                }
            }
        }
    }

    post {
        fixed {
            script {
                TEXT = "Build #${env.BUILD_NUMBER} fixed :-)\n\nBranch name: ${env.BRANCH_NAME}\nVersion: : ${VERSION}.${env.BUILD_NUMBER}\nJenkins result: ${env.BUILD_URL}"
                CHANNEL = "#grafana-ds-activity"
                USER_NAME = "grafana-ds-build"
                JSON="{ \"channel\": \"${CHANNEL}\", \"username\": \"${USER_NAME}\", \"text\": \"${TEXT}\" }"
            }

            echo "${currentBuild}"
            sh "curl -s -d \'payload=${JSON}\' \'${SLACK_URL}\'"
        }
        failure {
            script {
                TEXT = "Build #${env.BUILD_NUMBER} failed :-(\n\nBranch name: ${env.BRANCH_NAME}\nVersion: : ${VERSION}.${env.BUILD_NUMBER}\nJenkins result: ${env.BUILD_URL}"
                CHANNEL = "#grafana-ds-activity"
                USER_NAME = "grafana-ds-build"
                JSON="{ \"channel\": \"${CHANNEL}\", \"username\": \"${USER_NAME}\", \"text\": \"${TEXT}\" }"
            }

            echo "${currentBuild}"
            sh "curl -s -d \'payload=${JSON}\' \'${SLACK_URL}\'"
        }
        aborted {
            script {
                TEXT = "Build #${env.BUILD_NUMBER} unstable :-/\n\nBranch name: ${env.BRANCH_NAME}\nVersion: : ${VERSION}.${env.BUILD_NUMBER}\nJenkins result: ${env.BUILD_URL}"
                CHANNEL = "#grafana-ds-activity"
                USER_NAME = "grafana-ds-build"
                JSON="{ \"channel\": \"${CHANNEL}\", \"username\": \"${USER_NAME}\", \"text\": \"${TEXT}\" }"
            }

            echo "${currentBuild}"
            sh "curl -s -d \'payload=${JSON}\' \'${SLACK_URL}\'"
        }
        regression {
            script {
                TEXT = "Build #${env.BUILD_NUMBER} regression ;-(\n\nBranch name: ${env.BRANCH_NAME}\nVersion: : ${VERSION}.${env.BUILD_NUMBER}\nJenkins result: ${env.BUILD_URL}"
                CHANNEL = "#grafana-ds-activity"
                USER_NAME = "grafana-ds-build"
                JSON="{ \"channel\": \"${CHANNEL}\", \"username\": \"${USER_NAME}\", \"text\": \"${TEXT}\" }"
            }

            echo "${currentBuild}"
            sh "curl -s -d \'payload=${JSON}\' \'${SLACK_URL}\'"
        }
    }
}